[fan]
pin: PA8
kick_start_time: 0.5
off_below: 0.10

[heater_fan hotend_fan]
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
tachometer_pin: ^PG9
tachometer_poll_interval: 0.00004

[controller_fan controller_fan]
pin: PD12
kick_start_time: 0.5
max_power: .75
idle_speed: 0.0
idle_timeout: 600
cycle_time: 0.01
stepper: stepper_x,stepper_x1,stepper_y,stepper_y1,stepper_z,stepper_z1,stepper_z2

[controller_fan controller_fan2]
pin: PD13
kick_start_time: 0.5
max_power: 0.75
idle_speed: 0.0
idle_timeout: 600
cycle_time: 0.01
stepper: stepper_x,stepper_x1,stepper_y,stepper_y1,stepper_z,stepper_z1,stepper_z2

#[fan_generic rebreather]
#pin: PD14
#kick_start_time: 1.5
#max_power: 1
#cycle_time: 0.001
#hardware_pwm: true

[temperature_fan chamber]
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: C
pin: PD14
target_temp: 0
min_speed: 0
min_temp: -100
max_temp: 130
control: pid
pid_Kp: 70.184
pid_Ki: 0.376
pid_Kd: 3274.071
reverse:true
shutdown_speed: 0

[temperature_fan PTC_Core]
pin: PD15
#hardware_pwm:true
kick_start_time: 1
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF6
off_below:.35
target_temp: 65
max_power: 1
cycle_time: .0167
shutdown_speed: 1
min_temp: -110
max_temp: 250
control: pid
pid_Kp: 200
pid_Ki: 15
pid_Kd: 400
kick_start_time: 0.50


############

#Hotend Tacho
# Author: alch3my#9819
# Requires a 3-wire fan with tachometer_pin defined. https://www.klipper3d.org/Config_Reference.html#heater_fan
# The tach wire can be connected to a spare endstop pin. 
# Don't forget a pullup (^) on the tach pin (example: tachometer_pin: ^P1.29)

# Monitoring loop. Begins at Klipper start.
[delayed_gcode CHECK_ALL_FANS]
initial_duration: 1
gcode:
    HOTEND_FAN_CHECK
    UPDATE_DELAYED_GCODE ID=CHECK_ALL_FANS DURATION=3

# Change min_rpm and max_consecutive_stops to your desired values.
[gcode_macro HOTEND_FAN_CHECK]
variable_he_stop_count: 0
gcode:
    {% set min_rpm = 1000|float %}
    {% set max_consecutive_stops = 3 %}
    {% set rpm = printer['heater_fan hotend_fan'].rpm|float %}
    {% set he_target = printer[printer.toolhead.extruder].target|float %}
    {% set he_temp = printer[printer.toolhead.extruder].temperature|float %}
    {% set fan_on_temp = printer.configfile.settings['heater_fan hotend_fan'].heater_temp|float %}
    {% set he_stop_count = printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int %}

    {% if (he_target >= fan_on_temp) and (rpm < min_rpm) and (he_temp >= fan_on_temp) %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE={he_stop_count + 1}
        M118 WARNING: Fan stoppage detected ({he_stop_count+1}/{max_consecutive_stops}).
        M400
        {% if printer["gcode_macro HOTEND_FAN_CHECK"].he_stop_count|int >= max_consecutive_stops-1 %}
            FAN_STOPPAGE_ROUTINE
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=HOTEND_FAN_CHECK VARIABLE=he_stop_count VALUE=0
    {% endif %}

# Insert the gcode that you want to run when a fan stoppage is detected.
# This runs every ~3 seconds until the stop conditions are cleared.
[gcode_macro FAN_STOPPAGE_ROUTINE]
gcode:
    # If not already paused
    {% if printer['pause_resume'].is_paused|int == 0 %}
        M117 !!FAN STOPPAGE!!
        M118 FAN STOPPAGE DETECTED. PAUSING...
        PAUSE
        # Turn off the hotend. 
        # !! Don't forget to turn your hotend back on before resume. !!
        # -- If using this guide's pause/resume macros (in useful_macros.html), the hotend will automatically reheat on resume
        # -- (as long as the hotend is not turned off BEFORE pause is called)
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    {% endif %}
